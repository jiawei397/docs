(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{382:function(v,_,e){"use strict";e.r(_);var t=e(25),s=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"git常用技巧"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git常用技巧"}},[v._v("#")]),v._v(" git常用技巧")]),v._v(" "),e("h2",{attrs:{id:"分支管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支管理"}},[v._v("#")]),v._v(" 分支管理")]),v._v(" "),e("h3",{attrs:{id:"主干分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主干分支"}},[v._v("#")]),v._v(" 主干分支")]),v._v(" "),e("p",[v._v("一般主干分支应该有3个分支："),e("code",[v._v("master")]),v._v("、"),e("code",[v._v("release")]),v._v("和"),e("code",[v._v("develop")]),v._v("。")]),v._v(" "),e("ol",[e("li",[e("p",[v._v("不推荐直接提交或合并代码在"),e("code",[v._v("master")]),v._v("分支。")])]),v._v(" "),e("li",[e("p",[v._v("有当前版本要发布的功能可以合并到"),e("code",[v._v("release")]),v._v("分支上，其它的新功能应该合并到"),e("code",[v._v("develop")]),v._v("上。")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("master")]),v._v("分支的代码，应该只是一个迭代完成后，由"),e("code",[v._v("release")]),v._v("合并过来，再打上发版标签。")])]),v._v(" "),e("li",[e("p",[v._v("应该在远程仓库层面（比如"),e("code",[v._v("gitlab")]),v._v("）把这3个分支保护起来，不允许直接提交，必须经合并。")])])]),v._v(" "),e("h3",{attrs:{id:"开发分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开发分支"}},[v._v("#")]),v._v(" 开发分支")]),v._v(" "),e("p",[v._v("平时开发一定要新建分支，分支名称按功能（"),e("code",[v._v("feature")]),v._v(")可以命名为"),e("code",[v._v("feat-xx")]),v._v("，修复bug可以命名为"),e("code",[v._v("fix-xx")]),v._v("。")]),v._v(" "),e("p",[v._v("代码"),e("code",[v._v("push")]),v._v("到远程后，在"),e("code",[v._v("gitlab")]),v._v("页面上请求合并，经团队其他成员（一般是"),e("code",[v._v("leader")]),v._v(")"),e("code",[v._v("code review")]),v._v("后才能合到主干分支。")]),v._v(" "),e("h3",{attrs:{id:"初学者合并代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初学者合并代码"}},[v._v("#")]),v._v(" 初学者合并代码")]),v._v(" "),e("p",[v._v("对于初学者而言，如果担心自己的代码丢失的话，在"),e("code",[v._v("pull")]),v._v("代码之前，可以再开一个分支，把它"),e("code",[v._v("push")]),v._v("到远程。这样即使与别人代码冲突，解决的有问题，也可以从服务器上把自己的代码拉回来。")]),v._v(" "),e("p",[v._v("或者合并前，再建一个分支作为备份，等合并成功后再删除该分支。")]),v._v(" "),e("h2",{attrs:{id:"善用rebase"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#善用rebase"}},[v._v("#")]),v._v(" 善用rebase")]),v._v(" "),e("p",[e("code",[v._v("rebase")]),v._v("翻译成中文是"),e("code",[v._v("变基")]),v._v("的意思，好像也没那么好理解。平时都用"),e("code",[v._v("merge")]),v._v("，很少用它，因为不熟嘛。")]),v._v(" "),e("p",[v._v("最近上"),e("code",[v._v("爪哇教育")]),v._v("的公开课，"),e("code",[v._v("止水")]),v._v("老师这块讲的比较透彻，"),e("code",[v._v("git rebase")]),v._v("有一大堆参数，可以用来修改提交记录，甚至可以改变顺序。")]),v._v(" "),e("p",[v._v("在我看来，最大的作用是可以给我们一个干净的记录。")]),v._v(" "),e("p",[v._v("平时经常有这样的情况，A同学修改了文件1，提交后"),e("code",[v._v("push")]),v._v("到远程服务器； B同学也修改了这个文件，提交后也想"),e("code",[v._v("push")]),v._v("，失败，提示必须先更新，一更新就冲突。")]),v._v(" "),e("p",[v._v("解决冲突后，提交记录就被污染了，必须提交一个解决冲突的信息（"),e("code",[v._v("Merge branch 'test' of gitee.com:xx/test into test")]),v._v("），它对于我们而言并非必要的。")]),v._v(" "),e("p",[v._v("这时就轮到"),e("code",[v._v("rebase")]),v._v("出场了。")]),v._v(" "),e("p",[v._v("假设分支名称为"),e("code",[v._v("test")]),v._v("，使用步骤一般如下：")]),v._v(" "),e("ol",[e("li",[e("p",[e("code",[v._v("git fetch origin test")]),v._v("。意思是同步远程"),e("code",[v._v("test")]),v._v("分支代码到本地"),e("code",[v._v("remotes/origin/test")]),v._v("。后者其实是远程分支的一个本地备份（用"),e("code",[v._v("git branch -a")]),v._v("可以看到）。")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("git rebase remotes/origin/test")])])]),v._v(" "),e("li",[e("p",[v._v("解决冲突，提交")])])]),v._v(" "),e("p",[v._v("再看提交记录，干干净净。")]),v._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[v._v("vscode")]),v._v(" "),e("p",[v._v("如果你使用"),e("code",[v._v("vscode")]),v._v("，在可视化工具里，在"),e("code",[v._v("拉取-推送")]),v._v("中，选择"),e("code",[v._v("拉取(变基)")]),v._v("，与上面用代码处理是一样的")])])])}),[],!1,null,null,null);_.default=s.exports}}]);