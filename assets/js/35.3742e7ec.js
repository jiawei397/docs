(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{401:function(t,i,v){"use strict";v.r(i);var _=v(25),n=Object(_.a)({},(function(){var t=this,i=t.$createElement,v=t._self._c||i;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"golang中runtime-memstats说明【转】"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#golang中runtime-memstats说明【转】"}},[t._v("#")]),t._v(" golang中runtime.MemStats说明【转】")]),t._v(" "),v("p",[t._v("runtime.MemStats这个结构体包含的字段比较多，但是大多都很有用：")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("Alloc uint64 //golang语言框架堆空间分配的字节数")])]),t._v(" "),v("li",[v("p",[t._v("TotalAlloc uint64 //从服务开始运行至今分配器为分配的堆空间总 和，只有增加，释放的时候不减少")])]),t._v(" "),v("li",[v("p",[t._v("Sys uint64 //服务现在系统使用的内存")])]),t._v(" "),v("li",[v("p",[t._v("Lookups uint64 //被runtime监视的指针数")])]),t._v(" "),v("li",[v("p",[t._v("Mallocs uint64 //服务malloc heap objects的次数")])]),t._v(" "),v("li",[v("p",[t._v("Frees uint64 //服务回收的heap objects的次数")])]),t._v(" "),v("li",[v("p",[t._v("HeapAlloc uint64 //服务分配的堆内存字节数")])]),t._v(" "),v("li",[v("p",[t._v("HeapSys uint64 //系统分配的作为运行栈的内存")])]),t._v(" "),v("li",[v("p",[t._v("HeapIdle uint64 //申请但是未分配的堆内存或者回收了的堆内存（空闲）字节数")])]),t._v(" "),v("li",[v("p",[t._v("HeapInuse uint64 //正在使用的堆内存字节数")])]),t._v(" "),v("li",[v("p",[t._v("HeapReleased uint64 //返回给OS的堆内存，类似C/C++中的free。")])]),t._v(" "),v("li",[v("p",[t._v("HeapObjects uint64 //堆内存块申请的量")])]),t._v(" "),v("li",[v("p",[t._v("StackInuse uint64 //正在使用的栈字节数")])]),t._v(" "),v("li",[v("p",[t._v("StackSys uint64 //系统分配的作为运行栈的内存")])]),t._v(" "),v("li",[v("p",[t._v("MSpanInuse uint64 //用于测试用的结构体使用的字节数")])]),t._v(" "),v("li",[v("p",[t._v("MSpanSys uint64 //系统为测试用的结构体分配的字节数")])]),t._v(" "),v("li",[v("p",[t._v("MCacheInuse uint64 //mcache结构体申请的字节数(不会被视为垃圾回收)")])]),t._v(" "),v("li",[v("p",[t._v("MCacheSys uint64 //操作系统申请的堆空间用于mcache的字节数")])]),t._v(" "),v("li",[v("p",[t._v("BuckHashSys uint64 //用于剖析桶散列表的堆空间")])]),t._v(" "),v("li",[v("p",[t._v("GCSys uint64 //垃圾回收标记元信息使用的内存")])]),t._v(" "),v("li",[v("p",[t._v("OtherSys uint64 //golang系统架构占用的额外空间")])]),t._v(" "),v("li",[v("p",[t._v("NextGC uint64 //垃圾回收器检视的内存大小")])]),t._v(" "),v("li",[v("p",[t._v("LastGC uint64 // 垃圾回收器最后一次执行时间")])]),t._v(" "),v("li",[v("p",[t._v("PauseTotalNs uint64 // 垃圾回收或者其他信息收集导致服务暂停的次数")])]),t._v(" "),v("li",[v("p",[t._v("PauseNs [256]uint64 //一个循环队列，记录最近垃圾回收系统中断的时间")])]),t._v(" "),v("li",[v("p",[t._v("PauseEnd [256]uint64 //一个循环队列，记录最近垃圾回收系统中断的时间开始点")])]),t._v(" "),v("li",[v("p",[t._v("NumForcedGC uint32 //服务调用runtime.GC()强制使用垃圾回收的次数")])]),t._v(" "),v("li",[v("p",[t._v("GCCPUFraction float64 //垃圾回收占用服务CPU工作的时间总和。如果有100个goroutine，垃圾回收的时间为1s,那么就占用了100s")])]),t._v(" "),v("li",[v("p",[t._v("BySize //内存分配器使用情况")])])]),t._v(" "),v("p",[t._v("转自：http://www.iargs.cn/?p=62")])])}),[],!1,null,null,null);i.default=n.exports}}]);