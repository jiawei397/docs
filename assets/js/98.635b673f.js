(window.webpackJsonp=window.webpackJsonp||[]).push([[98],{465:function(t,n,e){"use strict";e.r(n);var a=e(25),s=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"nginx相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nginx相关"}},[t._v("#")]),t._v(" nginx相关")]),t._v(" "),e("h2",{attrs:{id:"常用命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[t._v("#")]),t._v(" 常用命令")]),t._v(" "),e("h3",{attrs:{id:"windows环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#windows环境"}},[t._v("#")]),t._v(" windows环境")]),t._v(" "),e("p",[t._v("到"),e("code",[t._v("nginx")]),t._v("的安装目录下，即"),e("code",[t._v("nginx.exe")]),t._v("所在的目录执行：")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动")]),t._v("\nstart nginx    //启动\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 停止")]),t._v("\nnginx -s stop    // 停止nginx\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重启")]),t._v("\nnginx -s reload   // 重新加载配置文件并重起\n")])])]),e("h3",{attrs:{id:"linux环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linux环境"}},[t._v("#")]),t._v(" linux环境")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动命令")]),t._v("\n/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 停止")]),t._v("\n/usr/local/nginx/sbin/nginx -s  stop\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重启")]),t._v("\n/usr/local/nginx/sbin/nginx -s  reload\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看进程命令")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" -ef "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" nginx\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 关闭进程")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("kill")]),t._v(" -HUP Nginx主进程号\n")])])]),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[e("code",[t._v("-c")]),t._v("：制定配置文件的路径")]),t._v(" "),e("p",[t._v("不加"),e("code",[t._v("-nginx")]),t._v("会自动加载默认路径的配置文件")])]),t._v(" "),e("h2",{attrs:{id:"root与alias"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#root与alias"}},[t._v("#")]),t._v(" root与alias")]),t._v(" "),e("h3",{attrs:{id:"alias"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#alias"}},[t._v("#")]),t._v(" alias")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("location /img/ {\n  alias /var/www/image/;\n}\n")])])]),e("p",[t._v("若按照上述配置的话，则访问"),e("code",[t._v("/img/")]),t._v("目录里面的文件时，"),e("code",[t._v("ningx")]),t._v("会自动去"),e("code",[t._v("/var/www/image/")]),t._v("目录找文件")]),t._v(" "),e("h3",{attrs:{id:"root"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#root"}},[t._v("#")]),t._v(" root")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("location /img/ {\n  root /var/www/image;\n}\n")])])]),e("p",[t._v("若按照这种配置的话，则访问"),e("code",[t._v("/img/")]),t._v("目录下的文件时，"),e("code",[t._v("nginx")]),t._v("会去"),e("code",[t._v("/var/www/image/img/")]),t._v("目录下找文件。")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[e("code",[t._v("alias")]),t._v("是一个目录别名的定义，"),e("code",[t._v("root")]),t._v("则是最上层目录的定义。")]),t._v(" "),e("p",[t._v("还有一个重要的区别是"),e("code",[t._v("alias")]),t._v("后面必须要用"),e("code",[t._v("/")]),t._v("结束，否则会找不到文件的。而"),e("code",[t._v("root")]),t._v("则可有可无")])]),t._v(" "),e("h2",{attrs:{id:"常用例子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用例子"}},[t._v("#")]),t._v(" 常用例子")]),t._v(" "),e("h3",{attrs:{id:"主配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主配置"}},[t._v("#")]),t._v(" 主配置")]),t._v(" "),e("div",{staticClass:"language-conf extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('#user XX administrator administrators;\nworker_processes  2;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n\t#设定日志格式\n    #log_format  main  \'$remote_addr - $remote_user [$time_local] "$request" \'\n    #                  \'$status $body_bytes_sent "$http_referer" \'\n    #                 \'"$http_user_agent" "$http_x_forwarded_for"\';\n\n    #access_log  logs/access.log  main;\n\n\t#sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，\n    #对于普通应用，必须设为 on,\n    #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，\n    #以平衡磁盘与网络I/O处理速度，降低系统的uptime.\n    sendfile        on;\n    #tcp_nopush     on;\n\n\t#连接超时时间\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n\t#开启gzip压缩\n\tgzip on;\n\n\t#不压缩临界值，大于1K的才压缩，一般不用改\n\tgzip_min_length 10k;\n\tgzip_buffers 4 16k;\n\n\t#用了反向代理的话，末端通信是HTTP/1.0；默认是HTTP/1.1\n\t#gzip_http_version 1.0;\n\n\t#压缩级别，1-10，数字越大压缩的越好，时间也越长\n\tgzip_comp_level 2;\n\n\t# nginx 做前端代理时启用该选项，表示无论后端服务器的headers头返回什么信息，都无条件启用压缩\n    gzip_proxied any;\n\n\t#进行压缩的文件类型，缺啥补啥就行了，JavaScript有两种写法，最好都写上吧，总有人抱怨js文件没有压缩，其实多写一种格式就行了\n\t#如果开启了对js压缩，则在Response Headers里可以看到，Content-Encoding:gzip，Transfer-Encoding:chunked\n\tgzip_types text/plain application/x-javascript text/css application/xml application/javascript text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n\n\t#跟Squid等缓存服务有关，on的话会在Header里增加"Vary: Accept-Encoding"，我不需要这玩意，自己对照情况看着办吧\n\tgzip_vary off;\n\n\t#IE6对Gzip不怎么友好，不给它Gzip了\n\tgzip_disable "MSIE [1-6]\\.";\n\n\t#设定请求缓冲\n    #client_header_buffer_size    128k;\n    #large_client_header_buffers  4 128k;\n\n\t#包含其它配置文件\n\tinclude nginx-fl.conf;\n}\n')])])]),e("h3",{attrs:{id:"子配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#子配置"}},[t._v("#")]),t._v(" 子配置")]),t._v(" "),e("div",{staticClass:"language-conf extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("#设定日志格式\nlog_format  fl  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                '$status $body_bytes_sent \"$http_referer\" '\n                '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\nupstream door_server{\n\tserver localhost:8280;\n}\n\nserver {\n\tlisten       8088;\n\tserver_name  localhost;\n\n\tclient_max_body_size 700M;\n  charset utf-8;\n\n\tlocation / {#请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。\n\t\troot\thtml;\n\t\tadd_header 'Access-Control-Allow-Origin' *;\n\t  #\tindex  index.html index.htm;\n\t\t# deny 127.0.0.1;  #拒绝的ip\n\t\t# allow 172.18.5.54; #允许的ip\n\t}\n\n\tlocation /door-api/ {\n\t\t\t#access_log off;\n\t\t\tproxy_connect_timeout 300;\n      proxy_read_timeout 300;\n      proxy_send_timeout 300;\n\t\t\tproxy_pass http://door_server/;\n\t}\n\n\tlocation ^~ /rsm-api {\n\t\tadd_header 'Access-Control-Allow-Origin' *;\n\t\talias C:/resource/;\n\t}\n\n\tlocation /test/ {\n\t\tproxy_cache cache_one;\n\t\tproxy_cache_valid 200 302 24h;\n\t\tproxy_cache_valid 301 30d;\n\t\tproxy_cache_valid any 5m;\n\t\t#proxy_cache_valid 200 302 30m;\n\t\t#proxy_cache_revalidate on;\n\t\texpires 300m;\n\t\tadd_header X-Cache-Status $upstream_cache_status;\n\t\tadd_header 'Access-Control-Allow-Origin' *;\n\t\talias C:/test/;\n\t}\n\n\taccess_log  logs/fl.access.log fl;\n\n\t# deny access to .htaccess files, if Apache's document root\n\t# concurs with nginx's one\n\t#禁止访问 .htxxx文件\n\tlocation ~ /\\.ht {\n\t\tdeny  all;\n\t}\n}\n\nserver {\n\tlisten       8001;\n\tserver_name  localhost;\n\n\tclient_max_body_size 700M;\n  charset utf-8;\n\n\tlocation /test/ {\n\t\tadd_header 'Access-Control-Allow-Origin' *;\n\t\talias C:/test2/;\n\t}\n}\n")])])]),e("h3",{attrs:{id:"配置websocket"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置websocket"}},[t._v("#")]),t._v(" 配置websocket")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("upstream ws_server{\n\tserver localhost:7002;\n\tkeepalive 1000;\n}\n\nmap $http_upgrade $connection_upgrade {\n\tdefault upgrade;\n\t'' close;\n}\n\nserver {\n\tlocation /ws-api {\n\t\tproxy_pass http://ws_server/file;\n\t\tproxy_http_version 1.1;\n\t\tproxy_redirect off;\n\t\tproxy_set_header Host $host;\n\t\tproxy_set_header X-Real-IP $remote_addr;\n\t\tproxy_read_timeout 3600s;\n\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\t\tproxy_set_header Upgrade $http_upgrade;\n\t\tproxy_set_header Connection $connection_upgrade;\n   }\n}\n\n")])])]),e("h3",{attrs:{id:"配置history路由"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置history路由"}},[t._v("#")]),t._v(" 配置history路由")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("server {\n\tlisten       3001;\n\tserver_name  localhost;\n\n\tclient_max_body_size 700M;\n  charset utf-8;\n\n\tlocation / {\n\t\troot\thtml;\n\t\tadd_header 'Access-Control-Allow-Origin' *;\n\t\tindex  index.html index.htm;\n\t\ttry_files $uri $uri/ /index.html; # 主要是这句，将没找到的地址，最终又转到index.html\n\t}\n}\n\n")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);