(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{472:function(e,a,t){"use strict";t.r(a);var v=t(25),s=Object(v.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"什么是deno"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是deno"}},[e._v("#")]),e._v(" 什么是deno")]),e._v(" "),t("h2",{attrs:{id:"简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[e._v("#")]),e._v(" 简介")]),e._v(" "),t("p",[e._v("简单说是"),t("code",[e._v("Node.js")]),e._v("的替代品，"),t("code",[e._v("Node.js")]),e._v("之父"),t("code",[e._v("Ryan Dahl")]),e._v(" 为挽回"),t("code",[e._v("Node.js")]),e._v("的错误而开发的。")]),e._v(" "),t("p",[t("code",[e._v("Node.js")]),e._v("存在的问题有：")]),e._v(" "),t("ol",[t("li",[e._v("npm包管理（"),t("code",[e._v("npm_modules")]),e._v("）复杂")]),e._v(" "),t("li",[e._v("历史原因导致的api维护，比如早期变态的"),t("code",[e._v("callback")]),e._v("设置")]),e._v(" "),t("li",[e._v("没有安全措施，用户只要下载了外部模块，就只好听任别人的代码在本地运行，进行各种读写操作。")]),e._v(" "),t("li",[e._v("功能不完善，导致各种工具层出不穷，比如"),t("code",[e._v("webpack")]),e._v("、"),t("code",[e._v("babel")]),e._v("等")])]),e._v(" "),t("p",[e._v("由于上面这些原因，"),t("code",[e._v("Ryan Dahl")]),e._v(" 决定放弃 "),t("code",[e._v("Node.js")]),e._v("，从头写一个替代品，彻底解决这些问题。\n"),t("code",[e._v("deno")]),e._v(" 这个名字就是来自 "),t("code",[e._v("Node")]),e._v(" 的字母重新组合（"),t("code",[e._v("Node = no + de")]),e._v('），表示"拆除 Node.js"（de = destroy, no = Node.js）。')]),e._v(" "),t("p",[e._v("跟 "),t("code",[e._v("Node.js")]),e._v("一样，"),t("code",[e._v("Deno")]),e._v(" 也是一个服务器运行时，但是支持多种语言，可以直接运行 "),t("code",[e._v("JavaScript")]),e._v("、"),t("code",[e._v("TypeScript")]),e._v(" 和 "),t("code",[e._v("WebAssembly")]),e._v(" 程序。")]),e._v(" "),t("p",[e._v("它内置了 "),t("code",[e._v("V8")]),e._v(" 引擎，用来解释 "),t("code",[e._v("JavaScript")]),e._v("。同时，也内置了 "),t("code",[e._v("tsc")]),e._v(" 引擎，解释 "),t("code",[e._v("TypeScript")]),e._v("。\n它使用 "),t("code",[e._v("Rust")]),e._v(" 语言开发，由于 "),t("code",[e._v("Rus")]),e._v("t 原生支持 "),t("code",[e._v("WebAssembly")]),e._v("，所以它也能直接运行 "),t("code",[e._v("WebAssembly")]),e._v("。\n它的异步操作不使用 "),t("code",[e._v("libuv")]),e._v(" 这个库，而是使用 "),t("code",[e._v("Rust")]),e._v(" 语言的 "),t("code",[e._v("Tokio")]),e._v(" 库，来实现事件循环（"),t("code",[e._v("event loop")]),e._v("）。")]),e._v(" "),t("h2",{attrs:{id:"安全机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安全机制"}},[e._v("#")]),e._v(" 安全机制")]),e._v(" "),t("p",[e._v("Deno 具有安全控制，默认情况下脚本不具有读写权限。如果脚本未授权，就读写文件系统或网络，会报错。")]),e._v(" "),t("p",[e._v("必须使用参数，显式打开权限才可以。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("--allow-read：打开读权限，可以指定可读的目录，比如--allow-read=/temp。\n--allow-write：打开写权限。\n--allow-net=google.com：允许网络通信，可以指定可请求的域，比如--allow-net=google.com。\n--allow-env：允许读取环境变量。\n")])])]),t("h2",{attrs:{id:"安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),t("p",[e._v("鉴于国内的网速原因，"),t("code",[e._v("@justjavac")]),e._v(" 大佬搞了国内的镜像加速：")]),e._v(" "),t("ol",[t("li",[e._v("Mac/Linux")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("curl -fsSL https://x.deno.js.cn/install.sh | sh\n")])])]),t("p",[e._v("我用linux部署后，报没有"),t("code",[e._v("glibc-2.18")]),e._v("这个版本依赖。")]),e._v(" "),t("p",[e._v("按网上教程，又安装了一下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("curl -O http://ftp.gnu.org/gnu/glibc/glibc-2.18.tar.gz\ntar zxf glibc-2.18.tar.gz\ncd glibc-2.18/\nmkdir build\ncd build/\n../configure --prefix=/usr\nmake -j2\nmake install\n")])])]),t("p",[e._v("后两步比较慢，不要退出。")]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[e._v("Windows")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("https://github.com/denoland/deno/releases\n")])])]),t("p",[e._v("直接在这里下载exe文件吧。")]),e._v(" "),t("h2",{attrs:{id:"设置环境变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置环境变量"}},[e._v("#")]),e._v(" 设置环境变量")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('echo \'export DENO_INSTALL="$HOME/.deno"\nexport PATH="$DENO_INSTALL/bin:$PATH"\nexport DENO_DIR=$HOME/.deno\n\' >> ~/.bash_profile\n\nsource ~/.bash_profile\n')])])]),t("h2",{attrs:{id:"测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[e._v("#")]),e._v(" 测试")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("deno --version\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("防火墙限制")]),e._v(" "),t("p",[e._v("在linux启动服务后，如果在外部浏览器访问不到，这时很可能是因为端口没有开启。\n参看："),t("a",{attrs:{href:"../../linux/firewall"}},[e._v("防火墙限制")])])]),e._v(" "),t("p",[e._v("参考：\n"),t("a",{attrs:{href:"https://juejin.im/post/5ebcabb2e51d454da74185a9#heading-2",target:"_blank",rel:"noopener noreferrer"}},[e._v("20 分钟入门 deno"),t("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=s.exports}}]);