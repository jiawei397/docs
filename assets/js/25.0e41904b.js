(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{391:function(e,s,a){"use strict";a.r(s);var o=a(25),t=Object(o.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"docker-compose小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose小结"}},[e._v("#")]),e._v(" docker-compose小结")]),e._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#安装"}},[e._v("安装")])]),a("li",[a("a",{attrs:{href:"#配置样例"}},[e._v("配置样例")])]),a("li",[a("a",{attrs:{href:"#启动"}},[e._v("启动")])]),a("li",[a("a",{attrs:{href:"#停止"}},[e._v("停止")])])])]),a("p"),e._v(" "),a("p",[a("code",[e._v("docker-compose")]),e._v("是基于"),a("code",[e._v("docker")]),e._v("的，可以组装"),a("code",[e._v("docker")]),e._v("镜像的工具，用来定义和运行由多个容器组成的应用。\n可以使用 "),a("code",[e._v("YML")]),e._v(" 文件来配置应用程序需要的所有服务。\n使用一个命令，就可以从 "),a("code",[e._v("YML")]),e._v(" 文件配置中创建并启动所有服务。")]),e._v(" "),a("h2",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),a("p",[e._v("windows各种坑，只说linux环境下"),a("a",{attrs:{href:"https://docs.docker.com/compose/install",target:"_blank",rel:"noopener noreferrer"}},[e._v("安装"),a("OutboundLink")],1),e._v("。")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" -L "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("uname")]),e._v(" -s"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("-"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("uname")]),e._v(" -m"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v('"')]),e._v(" -o /usr/local/bin/docker-compose\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("chmod")]),e._v(" +x /usr/local/bin/docker-compose\n\n$ docker-compose --version\ndocker-compose version "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.25")]),e._v(".5, build 1110ad01\n")])])]),a("h2",{attrs:{id:"配置样例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置样例"}},[e._v("#")]),e._v(" 配置样例")]),e._v(" "),a("p",[e._v("正如"),a("code",[e._v("docker")]),e._v("的配置镜像文件是"),a("code",[e._v("Dockerfile")]),e._v("，"),a("code",[e._v("docker-compose")]),e._v("的配置文件是："),a("code",[e._v("docker-compose.yml")]),e._v("。")]),e._v(" "),a("p",[e._v("一个简单例子如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('version: \'3\' # 指定的`docker-compose`对应的版本。以前用的是2，现在都改用3了。\n\nservices:\n  qserver:\n    build: ./dir  # 指定为构建镜像上下文路径，此处为 ./dir/Dockerfile 所构建的镜像\n    restart: always # 重启策略，如果容器退出后，是否要重启，怎样重启\n    ports:\n      - "3000:3000"\n      - "3001:3001"\n    volumes: # 挂载文件，冒号前是本地，后面是docker容器内文件夹\n      - /home/logs:/app/logs\n      - /home/config:/app/config\n    depends_on: # 依赖于下一个服务\n      - db  \n    environment: # 设置环境变量\n      - NODE_ENV=production\n  db:\n    image: docker.io/mongo\n    restart: on-failure:5\n    ports:\n      - "27018:27017"\n')])])]),a("p",[e._v("这里使用了2个镜像，启动了2个服务，前者依赖于后者。\n比如我这里使用了"),a("code",[e._v("mongodb")]),e._v("的镜像，在前者的生产代码里，"),a("code",[e._v("db")]),e._v("的地址是这样的："),a("code",[e._v("mongodb://db:27017/test")]),e._v("。\n也就是说，"),a("code",[e._v("ip地址")]),e._v("用这里服务的名称就可以，端口号用默认的"),a("code",[e._v("27017")]),e._v("，与暴露到外界的无关。\n我这里故意暴露一个"),a("code",[e._v("27018")]),e._v("，来加深印象。")]),e._v(" "),a("h2",{attrs:{id:"启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动"}},[e._v("#")]),e._v(" 启动")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("docker-compose up\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 后台启动")]),e._v("\ndocker-compose up -d\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 只启动某个服务，例如：qserver")]),e._v("\ndocker-compose up qserver\n")])])]),a("h2",{attrs:{id:"停止"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#停止"}},[e._v("#")]),e._v(" 停止")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("docker-compose stop\n")])])]),a("p",[e._v("再复杂的配置，就需要参考"),a("a",{attrs:{href:"https://docs.docker.com/compose/",target:"_blank",rel:"noopener noreferrer"}},[e._v("官网"),a("OutboundLink")],1),e._v("了。")])])}),[],!1,null,null,null);s.default=t.exports}}]);