(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{451:function(v,_,e){"use strict";e.r(_);var o=e(25),c=Object(o.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"csrf攻击与防御"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#csrf攻击与防御"}},[v._v("#")]),v._v(" CSRF攻击与防御")]),v._v(" "),e("h2",{attrs:{id:"csrf概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#csrf概念"}},[v._v("#")]),v._v(" CSRF概念")]),v._v(" "),e("p",[e("code",[v._v("CSRF")]),v._v("跨站点请求伪造("),e("code",[v._v("Cross—Site Request Forgery")]),v._v(")，跟"),e("code",[v._v("XSS")]),v._v("攻击一样，存在巨大的危害性，你可以这样来理解：")]),v._v(" "),e("p",[v._v("攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。")]),v._v(" "),e("p",[v._v("简单说，就是如果用户在攻击网站中保存了登陆状态，那么攻击者就可以利用这个登陆状态("),e("code",[v._v("cookie")]),v._v(")，绕过后台的用户验证，冒充用户向服务器执行一些操作。")]),v._v(" "),e("blockquote",[e("p",[v._v("其本质就是利用"),e("code",[v._v("cookie")]),v._v("会在同源请求中携带发送给服务器的特点，以此实现用户的冒充。")])]),v._v(" "),e("h2",{attrs:{id:"csrf攻击介绍及防御"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#csrf攻击介绍及防御"}},[v._v("#")]),v._v(" CSRF攻击介绍及防御")]),v._v(" "),e("p",[e("code",[v._v("CSRF")]),v._v("攻击攻击原理及过程如下，其中"),e("code",[v._v("Web A")]),v._v("为存在"),e("code",[v._v("CSRF")]),v._v("漏洞的网站，"),e("code",[v._v("Web B")]),v._v("为攻击者构建的恶意网站，"),e("code",[v._v("User C")]),v._v("为"),e("code",[v._v("Web A")]),v._v("网站的合法用户。")]),v._v(" "),e("ol",[e("li",[e("p",[e("code",[v._v("用户C")]),v._v("打开浏览器，访问受信任"),e("code",[v._v("网站A")]),v._v("，输入用户名和密码请求登录；")])]),v._v(" "),e("li",[e("p",[v._v("在用户信息通过验证后，"),e("code",[v._v("网站A")]),v._v("产生"),e("code",[v._v("Cookie")]),v._v("信息并返回给浏览器，此时用户登录"),e("code",[v._v("网站A")]),v._v("成功，可以正常发送请求到"),e("code",[v._v("网站A")]),v._v("；")])]),v._v(" "),e("li",[e("p",[v._v("用户未退出"),e("code",[v._v("网站A")]),v._v("之前，在同一浏览器中，打开一个"),e("code",[v._v("TAB页")]),v._v("访问"),e("code",[v._v("网站B")]),v._v("；")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("网站B")]),v._v("接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问"),e("code",[v._v("第三方站点A")]),v._v("；")])]),v._v(" "),e("li",[e("p",[v._v("浏览器在接收到这些攻击性代码后，根据"),e("code",[v._v("网站B")]),v._v("的请求，在用户不知情的情况下携带"),e("code",[v._v("Cookie")]),v._v("信息，向"),e("code",[v._v("网站A")]),v._v("发出请求。"),e("code",[v._v("网站A")]),v._v("并不知道该请求其实是由"),e("code",[v._v("B")]),v._v("发起的，所以会根据"),e("code",[v._v("用户C")]),v._v("的"),e("code",[v._v("Cookie")]),v._v("信息以"),e("code",[v._v("C")]),v._v("的权限处理该请求，导致来自"),e("code",[v._v("网站B")]),v._v("的恶意代码被执行。")])])]),v._v(" "),e("h2",{attrs:{id:"csrf攻击实例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#csrf攻击实例"}},[v._v("#")]),v._v(" CSRF攻击实例")]),v._v(" "),e("p",[v._v("受害者"),e("code",[v._v("Bob")]),v._v("在银行有一笔存款，通过对银行的网站发送请求 "),e("code",[v._v("http://bank.example/withdraw?account=bob&amount=1000000&for=bob2")]),v._v(" 可以使 "),e("code",[v._v("Bob")]),v._v("把 1000000 的存款转到 "),e("code",[v._v("bob2")]),v._v(" 的账号下。")]),v._v(" "),e("p",[v._v("通常情况下，该请求发送到网站后，服务器会先验证该请求是否来自一个合法的"),e("code",[v._v("session")]),v._v("，并且该 "),e("code",[v._v("session")]),v._v("的用户 "),e("code",[v._v("Bob")]),v._v(" 已经成功登陆。")]),v._v(" "),e("p",[v._v("黑客"),e("code",[v._v("Mallory")]),v._v("自己在该银行也有账户，他知道上文中的"),e("code",[v._v("URL")]),v._v(" 可以把钱进行转帐操作。"),e("code",[v._v("Mallory")]),v._v(" 可以自己发送一个请求给银行："),e("code",[v._v("http://bank.example/withdraw?account=bob&amount=1000000&for=Mallory")]),v._v("。但是这个请求来自 "),e("code",[v._v("Mallory")]),v._v(" 而非 "),e("code",[v._v("Bob")]),v._v("，他不能通过安全认证，因此该请求不会起作用。")]),v._v(" "),e("p",[v._v("这时，"),e("code",[v._v("Mallory")]),v._v("想到使用"),e("code",[v._v("CSRF")]),v._v("的攻击方式，他先自己做一个网站，在网站中放入如下代码： "),e("code",[v._v("src=”http://bank.example/withdraw?account=bob&amount=1000000&for=Mallory”")]),v._v("，并且通过广告等诱使 "),e("code",[v._v("Bob")]),v._v("来访问他的网站。")]),v._v(" "),e("p",[v._v("当"),e("code",[v._v("Bob")]),v._v("访问该网站时，上述 url 就会从 "),e("code",[v._v("Bob")]),v._v(" 的浏览器发向银行，而这个请求会附带 "),e("code",[v._v("Bob")]),v._v(" 浏览器中的 "),e("code",[v._v("cookie")]),v._v(" 一起发向银行服务器。")]),v._v(" "),e("p",[v._v("大多数情况下，该请求会失败，因为他要求"),e("code",[v._v("Bob")]),v._v("的认证信息。")]),v._v(" "),e("p",[v._v("但是，如果"),e("code",[v._v("Bob")]),v._v("当时恰巧刚访问他的银行后不久，他的浏览器与银行网站之间的 "),e("code",[v._v("session")]),v._v(" 尚未过期，浏览器的 "),e("code",[v._v("cookie")]),v._v(" 之中含有 "),e("code",[v._v("Bob")]),v._v(" 的认证信息。这时，悲剧发生了，这个 "),e("code",[v._v("url")]),v._v(" 请求就会得到响应，钱将从 "),e("code",[v._v("Bob")]),v._v(" 的账号转移到 "),e("code",[v._v("Mallory")]),v._v(" 的账号，而 "),e("code",[v._v("Bob")]),v._v(" 当时毫不知情。")]),v._v(" "),e("p",[v._v("等以后 "),e("code",[v._v("Bob")]),v._v(" 发现账户钱少了，即使他去银行查询日志，他也只能发现确实有一个来自于他本人的合法请求转移了资金，没有任何被攻击的痕迹。而 "),e("code",[v._v("Mallory")]),v._v(" 则可以拿到钱后逍遥法外。")]),v._v(" "),e("h2",{attrs:{id:"csrf漏洞检测"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#csrf漏洞检测"}},[v._v("#")]),v._v(" CSRF漏洞检测")]),v._v(" "),e("p",[v._v("检测"),e("code",[v._v("CSRF")]),v._v("漏洞是一项比较繁琐的工作，最简单的方法就是抓取一个正常请求的数据包，去掉"),e("code",[v._v("Referer")]),v._v("字段后再重新提交，如果该提交还有效，那么基本上可以确定存在"),e("code",[v._v("CSRF")]),v._v("漏洞。")]),v._v(" "),e("p",[v._v("随着对"),e("code",[v._v("CSRF")]),v._v("漏洞研究的不断深入，不断涌现出一些专门针对"),e("code",[v._v("CSRF")]),v._v("漏洞进行检测的工具，如"),e("code",[v._v("CSRFTester")]),v._v("，"),e("code",[v._v("CSRF Request Builder")]),v._v("等。")]),v._v(" "),e("p",[v._v("以"),e("code",[v._v("CSRFTester")]),v._v("工具为例，"),e("code",[v._v("CSRF")]),v._v("漏洞检测工具的测试原理如下：")]),v._v(" "),e("p",[v._v("使用"),e("code",[v._v("CSRFTester")]),v._v("进行测试时，首先需要抓取我们在浏览器中访问过的所有链接以及所有的表单等信息，然后通过在"),e("code",[v._v("CSRFTester")]),v._v("中修改相应的表单等信息，重新提交，这相当于一次伪造客户端请求。如果修改后的测试请求成功被网站服务器接受，则说明存在"),e("code",[v._v("CSRF")]),v._v("漏洞，当然此款工具也可以被用来进行"),e("code",[v._v("CSRF")]),v._v("攻击。")]),v._v(" "),e("h2",{attrs:{id:"防御csrf攻击"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#防御csrf攻击"}},[v._v("#")]),v._v(" 防御CSRF攻击")]),v._v(" "),e("p",[v._v("目前防御 CSRF 攻击主要有三种策略：")]),v._v(" "),e("ol",[e("li",[v._v("验证 "),e("code",[v._v("HTTP Referer")]),v._v(" 字段")]),v._v(" "),e("li",[v._v("自定义属性并验证")]),v._v(" "),e("li",[v._v("设置"),e("code",[v._v("cookie")]),v._v("同源策略，限制不能被第三方使用")])]),v._v(" "),e("h3",{attrs:{id:"验证-http-referer-字段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#验证-http-referer-字段"}},[v._v("#")]),v._v(" 验证 HTTP Referer 字段")]),v._v(" "),e("p",[v._v("根据 "),e("code",[v._v("HTTP")]),v._v(" 协议，在 "),e("code",[v._v("HTTP")]),v._v(" 头中有一个字段叫 "),e("code",[v._v("Referer")]),v._v("，它记录了该 "),e("code",[v._v("HTTP")]),v._v(" 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，比如需要访问 "),e("code",[v._v("http://bank.example/withdraw?account=bob&amount=1000000&for=Mallory")]),v._v("，用户必须先登陆 "),e("code",[v._v("bank.example")]),v._v("，然后通过点击页面上的按钮来触发转账事件。这时，该转帐请求的 "),e("code",[v._v("Referer")]),v._v(" 值就会是转账按钮所在的页面的 "),e("code",[v._v("URL")]),v._v("，通常是以 "),e("code",[v._v("bank.example")]),v._v("域名开头的地址。而如果黑客要对银行网站实施 "),e("code",[v._v("CSRF")]),v._v(" 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 "),e("code",[v._v("Referer")]),v._v(" 是指向黑客自己的网站。因此，要防御 "),e("code",[v._v("CSRF")]),v._v(" 攻击，银行网站只需要对于每一个转账请求验证其 "),e("code",[v._v("Referer")]),v._v(" 值，如果是以 "),e("code",[v._v("bank.example")]),v._v(" 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果 "),e("code",[v._v("Referer")]),v._v(" 是其他网站的话，则有可能是黑客的 "),e("code",[v._v("CSRF")]),v._v(" 攻击，拒绝该请求。")]),v._v(" "),e("p",[v._v("这种方法的显而易见的好处就是简单易行，网站的普通开发人员不需要操心 "),e("code",[v._v("CSRF")]),v._v(" 的漏洞，只需要在最后给所有安全敏感的请求统一增加一个拦截器来检查 "),e("code",[v._v("Referer")]),v._v(" 的值就可以。特别是对于当前现有的系统，不需要改变当前系统的任何已有代码和逻辑，没有风险，非常便捷。")]),v._v(" "),e("p",[v._v("然而，这种方法并非万无一失。"),e("code",[v._v("Referer")]),v._v(" 的值是由浏览器提供的，虽然 "),e("code",[v._v("HTTP")]),v._v(" 协议上有明确的要求，但是每个浏览器对于 "),e("code",[v._v("Referer")]),v._v(" 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 "),e("code",[v._v("Referer")]),v._v(" 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不安全。事实上，对于某些浏览器，比如 "),e("code",[v._v("IE6")]),v._v(" 或 "),e("code",[v._v("FF2")]),v._v("，目前已经有一些方法可以篡改 "),e("code",[v._v("Referer")]),v._v(" 值。如果 "),e("code",[v._v("bank.example")]),v._v(" 网站支持 "),e("code",[v._v("IE6")]),v._v(" 浏览器，黑客完全可以把用户浏览器的 "),e("code",[v._v("Referer")]),v._v(" 值设为以 "),e("code",[v._v("bank.example")]),v._v(" 域名开头的地址，这样就可以通过验证，从而进行 "),e("code",[v._v("CSRF")]),v._v(" 攻击。")]),v._v(" "),e("p",[v._v("即便是使用最新的浏览器，黑客无法篡改 "),e("code",[v._v("Referer")]),v._v(" 值，这种方法仍然有问题。因为 "),e("code",[v._v("Referer")]),v._v(" 值会记录下用户的访问来源，有些用户认为这样会侵犯到他们自己的隐私权，特别是有些组织担心 "),e("code",[v._v("Referer")]),v._v(" 值会把组织内网中的某些信息泄露到外网中。因此，用户自己可以设置浏览器使其在发送请求时不再提供 "),e("code",[v._v("Referer")]),v._v("。当他们正常访问银行网站时，网站会因为请求没有 "),e("code",[v._v("Referer")]),v._v(" 值而认为是 "),e("code",[v._v("CSRF")]),v._v(" 攻击，拒绝合法用户的访问。")]),v._v(" "),e("h3",{attrs:{id:"自定义属性并验证"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义属性并验证"}},[v._v("#")]),v._v(" 自定义属性并验证")]),v._v(" "),e("p",[e("code",[v._v("CSRF")]),v._v(" 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 "),e("code",[v._v("cookie")]),v._v(" 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 "),e("code",[v._v("cookie")]),v._v(" 来通过安全验证。")]),v._v(" "),e("p",[v._v("要抵御 "),e("code",[v._v("CSRF")]),v._v("，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 "),e("code",[v._v("cookie")]),v._v("之中。可以在 "),e("code",[v._v("HTTP")]),v._v(" 请求中以参数的形式或者在"),e("code",[v._v("HTTP头部")]),v._v("加入一个随机产生的 "),e("code",[v._v("token")]),v._v("，并在服务器端建立一个拦截器来验证这个 "),e("code",[v._v("token")]),v._v("，如果请求中没有 "),e("code",[v._v("token")]),v._v(" 或者 "),e("code",[v._v("token")]),v._v(" 内容不正确，则认为可能是 "),e("code",[v._v("CSRF")]),v._v(" 攻击而拒绝该请求。")]),v._v(" "),e("p",[v._v("这种方法要比检查 "),e("code",[v._v("Referer")]),v._v(" 要安全一些，"),e("code",[v._v("token")]),v._v(" 可以在用户登陆后产生并放于 "),e("code",[v._v("session")]),v._v(" 之中，然后在每次请求时把 "),e("code",[v._v("token")]),v._v(" 从 "),e("code",[v._v("session")]),v._v(" 中拿出，与请求中的 "),e("code",[v._v("token")]),v._v(" 进行比对。")]),v._v(" "),e("p",[v._v("随着分布式的出现，"),e("code",[v._v("session")]),v._v("的同步逐渐成为服务器一大麻烦，于是以时间换空间的"),e("code",[v._v("token")]),v._v("验证机制也应运而生，它不再存储于"),e("code",[v._v("session")]),v._v("之中，而是以特定的算法（一般是非对称加密）计算而出，又可以相应地解密出来，几乎可以认定是正确的。")]),v._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[v._v("axios防御CSRF攻击")]),v._v(" "),e("p",[v._v("现在最流行的"),e("code",[v._v("ajax")]),v._v("库"),e("code",[v._v("axios")]),v._v("，有一项能力就是可以防御"),e("code",[v._v("CSRF")]),v._v("攻击，本质就是这种方式。它有2个参数：")]),v._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[v._v(" xsrfCookieName: 'XSRF-TOKEN', // default\n xsrfHeaderName: 'X-XSRF-TOKEN', // default\n")])])]),e("p",[v._v("前者是"),e("code",[v._v("cookie")]),v._v("中的"),e("code",[v._v("token")]),v._v("字段名称，也就是说，如果"),e("code",[v._v("cookie")]),v._v("中有这个字段，就会在接口请求的"),e("code",[v._v("headers")]),v._v("中添加一个"),e("code",[v._v("xsrfHeaderName")]),v._v("对应的字段，这个字段需要与后台约定好，后台拿到以后就可以进行校验了。")])]),v._v(" "),e("h3",{attrs:{id:"设置cookie同源策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设置cookie同源策略"}},[v._v("#")]),v._v(" 设置cookie同源策略")]),v._v(" "),e("p",[e("code",[v._v("Cookie")]),v._v("中的同源只关注域名，忽略协议和端口。所以"),e("code",[v._v("https://localhost:8080/")]),v._v("和"),e("code",[v._v("http://localhost:8081/")]),v._v("的"),e("code",[v._v("Cookie")]),v._v("是共享的。")]),v._v(" "),e("p",[v._v("什么是"),e("code",[v._v("SameSite")]),v._v("？")]),v._v(" "),e("p",[e("code",[v._v("SameSite")]),v._v("是"),e("code",[v._v("Cookie")]),v._v("中可放置并能够被浏览器识别的字段。"),e("code",[v._v("SameSite")]),v._v("可以有三个值，分别是"),e("code",[v._v("Strict")]),v._v("，"),e("code",[v._v("Lax")]),v._v("和"),e("code",[v._v("None")]),v._v("。")]),v._v(" "),e("p",[e("code",[v._v("Strict")]),v._v("表示该"),e("code",[v._v("Cookie")]),v._v("仅用作第一方"),e("code",[v._v("Cookie")]),v._v("。并且当用户从"),e("code",[v._v("A网站")]),v._v("移动到"),e("code",[v._v("B网站")]),v._v("时，首次访问中不发送标为"),e("code",[v._v("Strict")]),v._v("的"),e("code",[v._v("B")]),v._v("网站"),e("code",[v._v("Cookie")]),v._v("。这对安全性需求较高的网站比较适用。如果你的"),e("code",[v._v("B网站")]),v._v("登录状态为"),e("code",[v._v("登录中")]),v._v("，那么"),e("code",[v._v("A网站")]),v._v("点到"),e("code",[v._v("B网站")]),v._v("时，登录状态为"),e("code",[v._v("未登录")]),v._v("，用户需要再点一次登录。这对一些"),e("code",[v._v("更改密码")]),v._v("或者"),e("code",[v._v("进行结账")]),v._v("的访问比较合适。")]),v._v(" "),e("p",[e("code",[v._v("Lax")]),v._v("与"),e("code",[v._v("Strict")]),v._v("大致相当，表示该"),e("code",[v._v("Cookie")]),v._v("仅用作第一方"),e("code",[v._v("Cookie")]),v._v("。但去掉了首次从其他网站来的推荐访问不发送"),e("code",[v._v("Cookie")]),v._v("的限制。")]),v._v(" "),e("p",[e("code",[v._v("None")]),v._v("则表示该"),e("code",[v._v("Cookie")]),v._v("可被跨域发送。")]),v._v(" "),e("p",[v._v("在2020年2月4日发布的新版"),e("code",[v._v("Chrome 80")]),v._v("中默认值将为"),e("code",[v._v("Lax")]),v._v("，而之前的版本默认为"),e("code",[v._v("None")]),v._v("。")]),v._v(" "),e("p",[v._v("这样，就可以避免上面的情况。")])])}),[],!1,null,null,null);_.default=c.exports}}]);